name: linearb-metrics-watch

on:
  schedule:
    - cron: "0 1 * * *"  # 毎日 JST 10:00 に実行
  workflow_dispatch:      # 手動実行も可能

jobs:
  create_issue_if_needed:
    runs-on: ubuntu-latest
    steps:
      - name: Check metrics & create Linear issue
        env:
          LB_TOKEN: ${{ secrets.LB_TOKEN }}
          LINEAR_TOKEN: ${{ secrets.LINEAR_TOKEN }}
          LINEAR_TEAM_ID: ${{ secrets.LINEAR_TEAM_ID }}
          ORG_ID: ${{ secrets.ORG_ID }}  # 新規追加
        run: |
          pip install requests --quiet
          python <<'PY'
          import os, requests, datetime, textwrap, json

          LB   = os.environ['LB_TOKEN']
          LIN  = os.environ['LINEAR_TOKEN']
          TEAM = os.environ['LINEAR_TEAM_ID']
          ORG  = os.environ.get('ORG_ID', '')  # 無い場合は空文字

          # --- ① LinearB v2 API ─ orgId付きで Pickup 平均を取得
          since = (datetime.date.today() - datetime.timedelta(days=7)).isoformat()
          
          payload = {
              "metrics": ["cycle-time.pickup"],
              "aggregate": "average",
              "from": since
          }
          
          # orgId がある場合は追加
          if ORG:
              payload["orgId"] = ORG

          try:
              # v2 API を使用
              res = requests.post(
                  "https://public-api.linearb.io/api/v2/measurements",
                  headers={
                      "x-api-key": LB, 
                      "Content-Type": "application/json"
                  },
                  json=payload, 
                  timeout=30
              )
              res.raise_for_status()
              pickup = res.json()["cycle-time.pickup"]["average"]
              
          except requests.exceptions.HTTPError as e:
              if e.response.status_code == 403:
                  print("❌ LinearB API 403 Forbidden")
                  print("解決策:")
                  print("1. LinearB Organization Settings で 'Enable Public API' を ON にする")
                  print("2. Organization ID を GitHub Secret 'ORG_ID' に追加する")
                  print("3. API Token を再生成して LB_TOKEN を更新する")
                  raise SystemExit(1)
              else:
                  raise

          THRESHOLD = 8 * 60  # しきい値: 8時間（480分）

          if pickup < THRESHOLD:
              print(f"✅ OK ({pickup/60:.1f}h < 8h)")
              quit()

          # --- ② Linear に Issue 作成
          title = f"[Auto] Pickup exceeds 8h ({pickup/60:.1f}h)"
          desc  = textwrap.dedent(f"""
          ### 問題
          Pickup 平均が **{pickup/60:.1f} 時間** と目標 8h を超過しています。

          ### 原因候補
          - Reviewer が偏っている
          - PR サイズが大きすぎる

          ### 対策案
          - CODEOWNERS 設定で reviewer 分散
          - PR ガイドの整備
          - danger/large-pr の自動チェック
          """)

          gql = """
          mutation($in: IssueCreateInput!) {
            issueCreate(input: $in) {
              issue {
                identifier
                url
              }
            }
          }
          """

          variables = {
            "in": {
              "teamId": TEAM,
              "title": title,
              "description": desc
            }
          }

          response = requests.post(
            "https://api.linear.app/graphql",
            headers={"Authorization": LIN},
            json={"query": gql, "variables": variables},
            timeout=30
          )
          
          data = response.json()
          if "errors" in data:
              print("❌ Linear API Error:", data["errors"])
              raise SystemExit(1)
              
          issue_url = data["data"]["issueCreate"]["issue"]["url"]
          print(f"✅ Linear Issue created: {issue_url}")
          PY
